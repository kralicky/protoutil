// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: github.com/pomerium/protoutil/test/testdata/testdata.proto

package testdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SampleEnum int32

const (
	SampleEnum_Unknown SampleEnum = 0
	SampleEnum_Foo     SampleEnum = 1
	SampleEnum_Bar     SampleEnum = 2
)

// Enum value maps for SampleEnum.
var (
	SampleEnum_name = map[int32]string{
		0: "Unknown",
		1: "Foo",
		2: "Bar",
	}
	SampleEnum_value = map[string]int32{
		"Unknown": 0,
		"Foo":     1,
		"Bar":     2,
	}
)

func (x SampleEnum) Enum() *SampleEnum {
	p := new(SampleEnum)
	*p = x
	return p
}

func (x SampleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[0].Descriptor()
}

func (SampleEnum) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[0]
}

func (x SampleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleEnum.Descriptor instead.
func (SampleEnum) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0}
}

type Message_Color int32

const (
	Message_RED   Message_Color = 0
	Message_GREEN Message_Color = 1
	Message_BLUE  Message_Color = 2
)

// Enum value maps for Message_Color.
var (
	Message_Color_name = map[int32]string{
		0: "RED",
		1: "GREEN",
		2: "BLUE",
	}
	Message_Color_value = map[string]int32{
		"RED":   0,
		"GREEN": 1,
		"BLUE":  2,
	}
)

func (x Message_Color) Enum() *Message_Color {
	p := new(Message_Color)
	*p = x
	return p
}

func (x Message_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[1].Descriptor()
}

func (Message_Color) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[1]
}

func (x Message_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Color.Descriptor instead.
func (Message_Color) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0, 0}
}

type Message_NestedMessage_NestedEnum int32

const (
	Message_NestedMessage_OPTION1 Message_NestedMessage_NestedEnum = 0
	Message_NestedMessage_OPTION2 Message_NestedMessage_NestedEnum = 1
	Message_NestedMessage_OPTION3 Message_NestedMessage_NestedEnum = 2
)

// Enum value maps for Message_NestedMessage_NestedEnum.
var (
	Message_NestedMessage_NestedEnum_name = map[int32]string{
		0: "OPTION1",
		1: "OPTION2",
		2: "OPTION3",
	}
	Message_NestedMessage_NestedEnum_value = map[string]int32{
		"OPTION1": 0,
		"OPTION2": 1,
		"OPTION3": 2,
	}
)

func (x Message_NestedMessage_NestedEnum) Enum() *Message_NestedMessage_NestedEnum {
	p := new(Message_NestedMessage_NestedEnum)
	*p = x
	return p
}

func (x Message_NestedMessage_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_NestedMessage_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[2].Descriptor()
}

func (Message_NestedMessage_NestedEnum) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[2]
}

func (x Message_NestedMessage_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_NestedMessage_NestedEnum.Descriptor instead.
func (Message_NestedMessage_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0, 22, 0}
}

type Message_NestedMessage_NestedMessage2_NestedEnum2 int32

const (
	Message_NestedMessage_NestedMessage2_OPTION1 Message_NestedMessage_NestedMessage2_NestedEnum2 = 0
)

// Enum value maps for Message_NestedMessage_NestedMessage2_NestedEnum2.
var (
	Message_NestedMessage_NestedMessage2_NestedEnum2_name = map[int32]string{
		0: "OPTION1",
	}
	Message_NestedMessage_NestedMessage2_NestedEnum2_value = map[string]int32{
		"OPTION1": 0,
	}
)

func (x Message_NestedMessage_NestedMessage2_NestedEnum2) Enum() *Message_NestedMessage_NestedMessage2_NestedEnum2 {
	p := new(Message_NestedMessage_NestedMessage2_NestedEnum2)
	*p = x
	return p
}

func (x Message_NestedMessage_NestedMessage2_NestedEnum2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_NestedMessage_NestedMessage2_NestedEnum2) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[3].Descriptor()
}

func (Message_NestedMessage_NestedMessage2_NestedEnum2) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[3]
}

func (x Message_NestedMessage_NestedMessage2_NestedEnum2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_NestedMessage_NestedMessage2_NestedEnum2.Descriptor instead.
func (Message_NestedMessage_NestedMessage2_NestedEnum2) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0, 22, 0, 0}
}

type Message2_Color int32

const (
	Message2_RED   Message2_Color = 0
	Message2_GREEN Message2_Color = 1
	Message2_BLUE  Message2_Color = 2
)

// Enum value maps for Message2_Color.
var (
	Message2_Color_name = map[int32]string{
		0: "RED",
		1: "GREEN",
		2: "BLUE",
	}
	Message2_Color_value = map[string]int32{
		"RED":   0,
		"GREEN": 1,
		"BLUE":  2,
	}
)

func (x Message2_Color) Enum() *Message2_Color {
	p := new(Message2_Color)
	*p = x
	return p
}

func (x Message2_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message2_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[4].Descriptor()
}

func (Message2_Color) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[4]
}

func (x Message2_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message2_Color.Descriptor instead.
func (Message2_Color) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1, 0}
}

type Message2_NestedMessage_NestedEnum int32

const (
	Message2_NestedMessage_OPTION1 Message2_NestedMessage_NestedEnum = 0
	Message2_NestedMessage_OPTION2 Message2_NestedMessage_NestedEnum = 1
	Message2_NestedMessage_OPTION3 Message2_NestedMessage_NestedEnum = 2
)

// Enum value maps for Message2_NestedMessage_NestedEnum.
var (
	Message2_NestedMessage_NestedEnum_name = map[int32]string{
		0: "OPTION1",
		1: "OPTION2",
		2: "OPTION3",
	}
	Message2_NestedMessage_NestedEnum_value = map[string]int32{
		"OPTION1": 0,
		"OPTION2": 1,
		"OPTION3": 2,
	}
)

func (x Message2_NestedMessage_NestedEnum) Enum() *Message2_NestedMessage_NestedEnum {
	p := new(Message2_NestedMessage_NestedEnum)
	*p = x
	return p
}

func (x Message2_NestedMessage_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message2_NestedMessage_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[5].Descriptor()
}

func (Message2_NestedMessage_NestedEnum) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[5]
}

func (x Message2_NestedMessage_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message2_NestedMessage_NestedEnum.Descriptor instead.
func (Message2_NestedMessage_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1, 21, 0}
}

type Message2_NestedMessage_NestedMessage2_NestedEnum2 int32

const (
	Message2_NestedMessage_NestedMessage2_OPTION1 Message2_NestedMessage_NestedMessage2_NestedEnum2 = 0
)

// Enum value maps for Message2_NestedMessage_NestedMessage2_NestedEnum2.
var (
	Message2_NestedMessage_NestedMessage2_NestedEnum2_name = map[int32]string{
		0: "OPTION1",
	}
	Message2_NestedMessage_NestedMessage2_NestedEnum2_value = map[string]int32{
		"OPTION1": 0,
	}
)

func (x Message2_NestedMessage_NestedMessage2_NestedEnum2) Enum() *Message2_NestedMessage_NestedMessage2_NestedEnum2 {
	p := new(Message2_NestedMessage_NestedMessage2_NestedEnum2)
	*p = x
	return p
}

func (x Message2_NestedMessage_NestedMessage2_NestedEnum2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message2_NestedMessage_NestedMessage2_NestedEnum2) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[6].Descriptor()
}

func (Message2_NestedMessage_NestedMessage2_NestedEnum2) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes[6]
}

func (x Message2_NestedMessage_NestedMessage2_NestedEnum2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message2_NestedMessage_NestedMessage2_NestedEnum2.Descriptor instead.
func (Message2_NestedMessage_NestedMessage2_NestedEnum2) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1, 21, 0, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Field          int32                              `protobuf:"varint,1,opt,name=int32_field,json=int32Field,proto3" json:"int32_field,omitempty"`
	Int64Field          int64                              `protobuf:"varint,2,opt,name=int64_field,json=int64Field,proto3" json:"int64_field,omitempty"`
	Uint32Field         uint32                             `protobuf:"varint,3,opt,name=uint32_field,json=uint32Field,proto3" json:"uint32_field,omitempty"`
	Uint64Field         uint64                             `protobuf:"varint,4,opt,name=uint64_field,json=uint64Field,proto3" json:"uint64_field,omitempty"`
	FloatField          float32                            `protobuf:"fixed32,5,opt,name=float_field,json=floatField,proto3" json:"float_field,omitempty"`
	DoubleField         float64                            `protobuf:"fixed64,6,opt,name=double_field,json=doubleField,proto3" json:"double_field,omitempty"`
	BoolField           bool                               `protobuf:"varint,7,opt,name=bool_field,json=boolField,proto3" json:"bool_field,omitempty"`
	StringField         string                             `protobuf:"bytes,8,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	BytesField          []byte                             `protobuf:"bytes,9,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	AnyField            *anypb.Any                         `protobuf:"bytes,10,opt,name=any_field,json=anyField,proto3" json:"any_field,omitempty"`
	DurationField       *durationpb.Duration               `protobuf:"bytes,11,opt,name=duration_field,json=durationField,proto3" json:"duration_field,omitempty"`
	TimestampField      *timestamppb.Timestamp             `protobuf:"bytes,12,opt,name=timestamp_field,json=timestampField,proto3" json:"timestamp_field,omitempty"`
	StructField         *structpb.Struct                   `protobuf:"bytes,13,opt,name=struct_field,json=structField,proto3" json:"struct_field,omitempty"`
	Uint32ValueField    *wrapperspb.UInt32Value            `protobuf:"bytes,14,opt,name=uint32_value_field,json=uint32ValueField,proto3" json:"uint32_value_field,omitempty"`
	Uint64ValueField    *wrapperspb.UInt64Value            `protobuf:"bytes,15,opt,name=uint64_value_field,json=uint64ValueField,proto3" json:"uint64_value_field,omitempty"`
	Int32ValueField     *wrapperspb.Int32Value             `protobuf:"bytes,16,opt,name=int32_value_field,json=int32ValueField,proto3" json:"int32_value_field,omitempty"`
	Int64ValueField     *wrapperspb.Int64Value             `protobuf:"bytes,17,opt,name=int64_value_field,json=int64ValueField,proto3" json:"int64_value_field,omitempty"`
	BoolValueField      *wrapperspb.BoolValue              `protobuf:"bytes,18,opt,name=bool_value_field,json=boolValueField,proto3" json:"bool_value_field,omitempty"`
	StringValueField    *wrapperspb.StringValue            `protobuf:"bytes,19,opt,name=string_value_field,json=stringValueField,proto3" json:"string_value_field,omitempty"`
	BytesValueField     *wrapperspb.BytesValue             `protobuf:"bytes,20,opt,name=bytes_value_field,json=bytesValueField,proto3" json:"bytes_value_field,omitempty"`
	MessageField        *Message2                          `protobuf:"bytes,21,opt,name=message_field,json=messageField,proto3" json:"message_field,omitempty"`
	FloatList           []float32                          `protobuf:"fixed32,22,rep,packed,name=float_list,json=floatList,proto3" json:"float_list,omitempty"`
	DoubleList          []float64                          `protobuf:"fixed64,23,rep,packed,name=double_list,json=doubleList,proto3" json:"double_list,omitempty"`
	BoolList            []bool                             `protobuf:"varint,24,rep,packed,name=bool_list,json=boolList,proto3" json:"bool_list,omitempty"`
	StringList          []string                           `protobuf:"bytes,25,rep,name=string_list,json=stringList,proto3" json:"string_list,omitempty"`
	BytesList           [][]byte                           `protobuf:"bytes,26,rep,name=bytes_list,json=bytesList,proto3" json:"bytes_list,omitempty"`
	AnyList             []*anypb.Any                       `protobuf:"bytes,27,rep,name=any_list,json=anyList,proto3" json:"any_list,omitempty"`
	DurationList        []*durationpb.Duration             `protobuf:"bytes,28,rep,name=duration_list,json=durationList,proto3" json:"duration_list,omitempty"`
	TimestampList       []*timestamppb.Timestamp           `protobuf:"bytes,29,rep,name=timestamp_list,json=timestampList,proto3" json:"timestamp_list,omitempty"`
	StructList          []*structpb.Struct                 `protobuf:"bytes,30,rep,name=struct_list,json=structList,proto3" json:"struct_list,omitempty"`
	Uint32ValueList     []*wrapperspb.UInt32Value          `protobuf:"bytes,31,rep,name=uint32_value_list,json=uint32ValueList,proto3" json:"uint32_value_list,omitempty"`
	Uint64ValueList     []*wrapperspb.UInt64Value          `protobuf:"bytes,32,rep,name=uint64_value_list,json=uint64ValueList,proto3" json:"uint64_value_list,omitempty"`
	Int32ValueList      []*wrapperspb.Int32Value           `protobuf:"bytes,33,rep,name=int32_value_list,json=int32ValueList,proto3" json:"int32_value_list,omitempty"`
	Int64ValueList      []*wrapperspb.Int64Value           `protobuf:"bytes,34,rep,name=int64_value_list,json=int64ValueList,proto3" json:"int64_value_list,omitempty"`
	BoolValueList       []*wrapperspb.BoolValue            `protobuf:"bytes,35,rep,name=bool_value_list,json=boolValueList,proto3" json:"bool_value_list,omitempty"`
	StringValueList     []*wrapperspb.StringValue          `protobuf:"bytes,36,rep,name=string_value_list,json=stringValueList,proto3" json:"string_value_list,omitempty"`
	BytesValueList      []*wrapperspb.BytesValue           `protobuf:"bytes,37,rep,name=bytes_value_list,json=bytesValueList,proto3" json:"bytes_value_list,omitempty"`
	MessageList         []*Message2                        `protobuf:"bytes,38,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty"`
	Int32ToBool         map[int32]bool                     `protobuf:"bytes,39,rep,name=int32_to_bool,json=int32ToBool,proto3" json:"int32_to_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int64ToString       map[int64]string                   `protobuf:"bytes,40,rep,name=int64_to_string,json=int64ToString,proto3" json:"int64_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint32ToBytes       map[uint32][]byte                  `protobuf:"bytes,41,rep,name=uint32_to_bytes,json=uint32ToBytes,proto3" json:"uint32_to_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint64ToAny         map[uint64]*anypb.Any              `protobuf:"bytes,42,rep,name=uint64_to_any,json=uint64ToAny,proto3" json:"uint64_to_any,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToMessage       map[bool]*Message2                 `protobuf:"bytes,43,rep,name=bool_to_message,json=boolToMessage,proto3" json:"bool_to_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToFloat       map[string]float32                 `protobuf:"bytes,44,rep,name=string_to_float,json=stringToFloat,proto3" json:"string_to_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringToDouble      map[string]float64                 `protobuf:"bytes,45,rep,name=string_to_double,json=stringToDouble,proto3" json:"string_to_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringToBool        map[string]bool                    `protobuf:"bytes,46,rep,name=string_to_bool,json=stringToBool,proto3" json:"string_to_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToString      map[string]string                  `protobuf:"bytes,47,rep,name=string_to_string,json=stringToString,proto3" json:"string_to_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToBytes       map[string][]byte                  `protobuf:"bytes,48,rep,name=string_to_bytes,json=stringToBytes,proto3" json:"string_to_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToAny         map[string]*anypb.Any              `protobuf:"bytes,49,rep,name=string_to_any,json=stringToAny,proto3" json:"string_to_any,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToDuration    map[string]*durationpb.Duration    `protobuf:"bytes,50,rep,name=string_to_duration,json=stringToDuration,proto3" json:"string_to_duration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToTimestamp   map[string]*timestamppb.Timestamp  `protobuf:"bytes,51,rep,name=string_to_timestamp,json=stringToTimestamp,proto3" json:"string_to_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToStruct      map[string]*structpb.Struct        `protobuf:"bytes,52,rep,name=string_to_struct,json=stringToStruct,proto3" json:"string_to_struct,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToUint32Value map[string]*wrapperspb.UInt32Value `protobuf:"bytes,53,rep,name=string_to_uint32_value,json=stringToUint32Value,proto3" json:"string_to_uint32_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToUint64Value map[string]*wrapperspb.UInt64Value `protobuf:"bytes,54,rep,name=string_to_uint64_value,json=stringToUint64Value,proto3" json:"string_to_uint64_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToInt32Value  map[string]*wrapperspb.Int32Value  `protobuf:"bytes,55,rep,name=string_to_int32_value,json=stringToInt32Value,proto3" json:"string_to_int32_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToInt64Value  map[string]*wrapperspb.Int64Value  `protobuf:"bytes,56,rep,name=string_to_int64_value,json=stringToInt64Value,proto3" json:"string_to_int64_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToBoolValue   map[string]*wrapperspb.BoolValue   `protobuf:"bytes,57,rep,name=string_to_bool_value,json=stringToBoolValue,proto3" json:"string_to_bool_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToStringValue map[string]*wrapperspb.StringValue `protobuf:"bytes,58,rep,name=string_to_string_value,json=stringToStringValue,proto3" json:"string_to_string_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToBytesValue  map[string]*wrapperspb.BytesValue  `protobuf:"bytes,59,rep,name=string_to_bytes_value,json=stringToBytesValue,proto3" json:"string_to_bytes_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToMessage     map[string]*Message2               `protobuf:"bytes,60,rep,name=string_to_message,json=stringToMessage,proto3" json:"string_to_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumField           Message_Color                      `protobuf:"varint,61,opt,name=enum_field,json=enumField,proto3,enum=testdata.Message_Color" json:"enum_field,omitempty"`
	// Types that are assignable to OneofField:
	//
	//	*Message_OneofInt32Field
	//	*Message_OneofStringField
	//	*Message_OneofBoolField
	//	*Message_OneofNestedMessageField
	//	*Message_OneofMessageField
	OneofField isMessage_OneofField `protobuf_oneof:"oneof_field"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetInt32Field() int32 {
	if x != nil {
		return x.Int32Field
	}
	return 0
}

func (x *Message) GetInt64Field() int64 {
	if x != nil {
		return x.Int64Field
	}
	return 0
}

func (x *Message) GetUint32Field() uint32 {
	if x != nil {
		return x.Uint32Field
	}
	return 0
}

func (x *Message) GetUint64Field() uint64 {
	if x != nil {
		return x.Uint64Field
	}
	return 0
}

func (x *Message) GetFloatField() float32 {
	if x != nil {
		return x.FloatField
	}
	return 0
}

func (x *Message) GetDoubleField() float64 {
	if x != nil {
		return x.DoubleField
	}
	return 0
}

func (x *Message) GetBoolField() bool {
	if x != nil {
		return x.BoolField
	}
	return false
}

func (x *Message) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *Message) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (x *Message) GetAnyField() *anypb.Any {
	if x != nil {
		return x.AnyField
	}
	return nil
}

func (x *Message) GetDurationField() *durationpb.Duration {
	if x != nil {
		return x.DurationField
	}
	return nil
}

func (x *Message) GetTimestampField() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampField
	}
	return nil
}

func (x *Message) GetStructField() *structpb.Struct {
	if x != nil {
		return x.StructField
	}
	return nil
}

func (x *Message) GetUint32ValueField() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueField
	}
	return nil
}

func (x *Message) GetUint64ValueField() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueField
	}
	return nil
}

func (x *Message) GetInt32ValueField() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueField
	}
	return nil
}

func (x *Message) GetInt64ValueField() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueField
	}
	return nil
}

func (x *Message) GetBoolValueField() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueField
	}
	return nil
}

func (x *Message) GetStringValueField() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValueField
	}
	return nil
}

func (x *Message) GetBytesValueField() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueField
	}
	return nil
}

func (x *Message) GetMessageField() *Message2 {
	if x != nil {
		return x.MessageField
	}
	return nil
}

func (x *Message) GetFloatList() []float32 {
	if x != nil {
		return x.FloatList
	}
	return nil
}

func (x *Message) GetDoubleList() []float64 {
	if x != nil {
		return x.DoubleList
	}
	return nil
}

func (x *Message) GetBoolList() []bool {
	if x != nil {
		return x.BoolList
	}
	return nil
}

func (x *Message) GetStringList() []string {
	if x != nil {
		return x.StringList
	}
	return nil
}

func (x *Message) GetBytesList() [][]byte {
	if x != nil {
		return x.BytesList
	}
	return nil
}

func (x *Message) GetAnyList() []*anypb.Any {
	if x != nil {
		return x.AnyList
	}
	return nil
}

func (x *Message) GetDurationList() []*durationpb.Duration {
	if x != nil {
		return x.DurationList
	}
	return nil
}

func (x *Message) GetTimestampList() []*timestamppb.Timestamp {
	if x != nil {
		return x.TimestampList
	}
	return nil
}

func (x *Message) GetStructList() []*structpb.Struct {
	if x != nil {
		return x.StructList
	}
	return nil
}

func (x *Message) GetUint32ValueList() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueList
	}
	return nil
}

func (x *Message) GetUint64ValueList() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueList
	}
	return nil
}

func (x *Message) GetInt32ValueList() []*wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueList
	}
	return nil
}

func (x *Message) GetInt64ValueList() []*wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueList
	}
	return nil
}

func (x *Message) GetBoolValueList() []*wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueList
	}
	return nil
}

func (x *Message) GetStringValueList() []*wrapperspb.StringValue {
	if x != nil {
		return x.StringValueList
	}
	return nil
}

func (x *Message) GetBytesValueList() []*wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueList
	}
	return nil
}

func (x *Message) GetMessageList() []*Message2 {
	if x != nil {
		return x.MessageList
	}
	return nil
}

func (x *Message) GetInt32ToBool() map[int32]bool {
	if x != nil {
		return x.Int32ToBool
	}
	return nil
}

func (x *Message) GetInt64ToString() map[int64]string {
	if x != nil {
		return x.Int64ToString
	}
	return nil
}

func (x *Message) GetUint32ToBytes() map[uint32][]byte {
	if x != nil {
		return x.Uint32ToBytes
	}
	return nil
}

func (x *Message) GetUint64ToAny() map[uint64]*anypb.Any {
	if x != nil {
		return x.Uint64ToAny
	}
	return nil
}

func (x *Message) GetBoolToMessage() map[bool]*Message2 {
	if x != nil {
		return x.BoolToMessage
	}
	return nil
}

func (x *Message) GetStringToFloat() map[string]float32 {
	if x != nil {
		return x.StringToFloat
	}
	return nil
}

func (x *Message) GetStringToDouble() map[string]float64 {
	if x != nil {
		return x.StringToDouble
	}
	return nil
}

func (x *Message) GetStringToBool() map[string]bool {
	if x != nil {
		return x.StringToBool
	}
	return nil
}

func (x *Message) GetStringToString() map[string]string {
	if x != nil {
		return x.StringToString
	}
	return nil
}

func (x *Message) GetStringToBytes() map[string][]byte {
	if x != nil {
		return x.StringToBytes
	}
	return nil
}

func (x *Message) GetStringToAny() map[string]*anypb.Any {
	if x != nil {
		return x.StringToAny
	}
	return nil
}

func (x *Message) GetStringToDuration() map[string]*durationpb.Duration {
	if x != nil {
		return x.StringToDuration
	}
	return nil
}

func (x *Message) GetStringToTimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.StringToTimestamp
	}
	return nil
}

func (x *Message) GetStringToStruct() map[string]*structpb.Struct {
	if x != nil {
		return x.StringToStruct
	}
	return nil
}

func (x *Message) GetStringToUint32Value() map[string]*wrapperspb.UInt32Value {
	if x != nil {
		return x.StringToUint32Value
	}
	return nil
}

func (x *Message) GetStringToUint64Value() map[string]*wrapperspb.UInt64Value {
	if x != nil {
		return x.StringToUint64Value
	}
	return nil
}

func (x *Message) GetStringToInt32Value() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.StringToInt32Value
	}
	return nil
}

func (x *Message) GetStringToInt64Value() map[string]*wrapperspb.Int64Value {
	if x != nil {
		return x.StringToInt64Value
	}
	return nil
}

func (x *Message) GetStringToBoolValue() map[string]*wrapperspb.BoolValue {
	if x != nil {
		return x.StringToBoolValue
	}
	return nil
}

func (x *Message) GetStringToStringValue() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.StringToStringValue
	}
	return nil
}

func (x *Message) GetStringToBytesValue() map[string]*wrapperspb.BytesValue {
	if x != nil {
		return x.StringToBytesValue
	}
	return nil
}

func (x *Message) GetStringToMessage() map[string]*Message2 {
	if x != nil {
		return x.StringToMessage
	}
	return nil
}

func (x *Message) GetEnumField() Message_Color {
	if x != nil {
		return x.EnumField
	}
	return Message_RED
}

func (m *Message) GetOneofField() isMessage_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (x *Message) GetOneofInt32Field() int32 {
	if x, ok := x.GetOneofField().(*Message_OneofInt32Field); ok {
		return x.OneofInt32Field
	}
	return 0
}

func (x *Message) GetOneofStringField() string {
	if x, ok := x.GetOneofField().(*Message_OneofStringField); ok {
		return x.OneofStringField
	}
	return ""
}

func (x *Message) GetOneofBoolField() bool {
	if x, ok := x.GetOneofField().(*Message_OneofBoolField); ok {
		return x.OneofBoolField
	}
	return false
}

func (x *Message) GetOneofNestedMessageField() *Message_NestedMessage {
	if x, ok := x.GetOneofField().(*Message_OneofNestedMessageField); ok {
		return x.OneofNestedMessageField
	}
	return nil
}

func (x *Message) GetOneofMessageField() *Message2 {
	if x, ok := x.GetOneofField().(*Message_OneofMessageField); ok {
		return x.OneofMessageField
	}
	return nil
}

type isMessage_OneofField interface {
	isMessage_OneofField()
}

type Message_OneofInt32Field struct {
	OneofInt32Field int32 `protobuf:"varint,62,opt,name=oneof_int32_field,json=oneofInt32Field,proto3,oneof"`
}

type Message_OneofStringField struct {
	OneofStringField string `protobuf:"bytes,63,opt,name=oneof_string_field,json=oneofStringField,proto3,oneof"`
}

type Message_OneofBoolField struct {
	OneofBoolField bool `protobuf:"varint,64,opt,name=oneof_bool_field,json=oneofBoolField,proto3,oneof"`
}

type Message_OneofNestedMessageField struct {
	OneofNestedMessageField *Message_NestedMessage `protobuf:"bytes,65,opt,name=oneof_nested_message_field,json=oneofNestedMessageField,proto3,oneof"`
}

type Message_OneofMessageField struct {
	OneofMessageField *Message2 `protobuf:"bytes,66,opt,name=oneof_message_field,json=oneofMessageField,proto3,oneof"`
}

func (*Message_OneofInt32Field) isMessage_OneofField() {}

func (*Message_OneofStringField) isMessage_OneofField() {}

func (*Message_OneofBoolField) isMessage_OneofField() {}

func (*Message_OneofNestedMessageField) isMessage_OneofField() {}

func (*Message_OneofMessageField) isMessage_OneofField() {}

// same as Message, but without recursive fields
type Message2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Field          int32                              `protobuf:"varint,1,opt,name=int32_field,json=int32Field,proto3" json:"int32_field,omitempty"`
	Int64Field          int64                              `protobuf:"varint,2,opt,name=int64_field,json=int64Field,proto3" json:"int64_field,omitempty"`
	Uint32Field         uint32                             `protobuf:"varint,3,opt,name=uint32_field,json=uint32Field,proto3" json:"uint32_field,omitempty"`
	Uint64Field         uint64                             `protobuf:"varint,4,opt,name=uint64_field,json=uint64Field,proto3" json:"uint64_field,omitempty"`
	FloatField          float32                            `protobuf:"fixed32,5,opt,name=float_field,json=floatField,proto3" json:"float_field,omitempty"`
	DoubleField         float64                            `protobuf:"fixed64,6,opt,name=double_field,json=doubleField,proto3" json:"double_field,omitempty"`
	BoolField           bool                               `protobuf:"varint,7,opt,name=bool_field,json=boolField,proto3" json:"bool_field,omitempty"`
	StringField         string                             `protobuf:"bytes,8,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	BytesField          []byte                             `protobuf:"bytes,9,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	AnyField            *anypb.Any                         `protobuf:"bytes,10,opt,name=any_field,json=anyField,proto3" json:"any_field,omitempty"`
	DurationField       *durationpb.Duration               `protobuf:"bytes,11,opt,name=duration_field,json=durationField,proto3" json:"duration_field,omitempty"`
	TimestampField      *timestamppb.Timestamp             `protobuf:"bytes,12,opt,name=timestamp_field,json=timestampField,proto3" json:"timestamp_field,omitempty"`
	StructField         *structpb.Struct                   `protobuf:"bytes,13,opt,name=struct_field,json=structField,proto3" json:"struct_field,omitempty"`
	Uint32ValueField    *wrapperspb.UInt32Value            `protobuf:"bytes,14,opt,name=uint32_value_field,json=uint32ValueField,proto3" json:"uint32_value_field,omitempty"`
	Uint64ValueField    *wrapperspb.UInt64Value            `protobuf:"bytes,15,opt,name=uint64_value_field,json=uint64ValueField,proto3" json:"uint64_value_field,omitempty"`
	Int32ValueField     *wrapperspb.Int32Value             `protobuf:"bytes,16,opt,name=int32_value_field,json=int32ValueField,proto3" json:"int32_value_field,omitempty"`
	Int64ValueField     *wrapperspb.Int64Value             `protobuf:"bytes,17,opt,name=int64_value_field,json=int64ValueField,proto3" json:"int64_value_field,omitempty"`
	BoolValueField      *wrapperspb.BoolValue              `protobuf:"bytes,18,opt,name=bool_value_field,json=boolValueField,proto3" json:"bool_value_field,omitempty"`
	StringValueField    *wrapperspb.StringValue            `protobuf:"bytes,19,opt,name=string_value_field,json=stringValueField,proto3" json:"string_value_field,omitempty"`
	BytesValueField     *wrapperspb.BytesValue             `protobuf:"bytes,20,opt,name=bytes_value_field,json=bytesValueField,proto3" json:"bytes_value_field,omitempty"`
	FloatList           []float32                          `protobuf:"fixed32,22,rep,packed,name=float_list,json=floatList,proto3" json:"float_list,omitempty"`
	DoubleList          []float64                          `protobuf:"fixed64,23,rep,packed,name=double_list,json=doubleList,proto3" json:"double_list,omitempty"`
	BoolList            []bool                             `protobuf:"varint,24,rep,packed,name=bool_list,json=boolList,proto3" json:"bool_list,omitempty"`
	StringList          []string                           `protobuf:"bytes,25,rep,name=string_list,json=stringList,proto3" json:"string_list,omitempty"`
	BytesList           [][]byte                           `protobuf:"bytes,26,rep,name=bytes_list,json=bytesList,proto3" json:"bytes_list,omitempty"`
	AnyList             []*anypb.Any                       `protobuf:"bytes,27,rep,name=any_list,json=anyList,proto3" json:"any_list,omitempty"`
	DurationList        []*durationpb.Duration             `protobuf:"bytes,28,rep,name=duration_list,json=durationList,proto3" json:"duration_list,omitempty"`
	TimestampList       []*timestamppb.Timestamp           `protobuf:"bytes,29,rep,name=timestamp_list,json=timestampList,proto3" json:"timestamp_list,omitempty"`
	StructList          []*structpb.Struct                 `protobuf:"bytes,30,rep,name=struct_list,json=structList,proto3" json:"struct_list,omitempty"`
	Uint32ValueList     []*wrapperspb.UInt32Value          `protobuf:"bytes,31,rep,name=uint32_value_list,json=uint32ValueList,proto3" json:"uint32_value_list,omitempty"`
	Uint64ValueList     []*wrapperspb.UInt64Value          `protobuf:"bytes,32,rep,name=uint64_value_list,json=uint64ValueList,proto3" json:"uint64_value_list,omitempty"`
	Int32ValueList      []*wrapperspb.Int32Value           `protobuf:"bytes,33,rep,name=int32_value_list,json=int32ValueList,proto3" json:"int32_value_list,omitempty"`
	Int64ValueList      []*wrapperspb.Int64Value           `protobuf:"bytes,34,rep,name=int64_value_list,json=int64ValueList,proto3" json:"int64_value_list,omitempty"`
	BoolValueList       []*wrapperspb.BoolValue            `protobuf:"bytes,35,rep,name=bool_value_list,json=boolValueList,proto3" json:"bool_value_list,omitempty"`
	StringValueList     []*wrapperspb.StringValue          `protobuf:"bytes,36,rep,name=string_value_list,json=stringValueList,proto3" json:"string_value_list,omitempty"`
	BytesValueList      []*wrapperspb.BytesValue           `protobuf:"bytes,37,rep,name=bytes_value_list,json=bytesValueList,proto3" json:"bytes_value_list,omitempty"`
	Int32ToBool         map[int32]bool                     `protobuf:"bytes,39,rep,name=int32_to_bool,json=int32ToBool,proto3" json:"int32_to_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int64ToString       map[int64]string                   `protobuf:"bytes,40,rep,name=int64_to_string,json=int64ToString,proto3" json:"int64_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint32ToBytes       map[uint32][]byte                  `protobuf:"bytes,41,rep,name=uint32_to_bytes,json=uint32ToBytes,proto3" json:"uint32_to_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint64ToAny         map[uint64]*anypb.Any              `protobuf:"bytes,42,rep,name=uint64_to_any,json=uint64ToAny,proto3" json:"uint64_to_any,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToAny           map[bool]*anypb.Any                `protobuf:"bytes,43,rep,name=bool_to_any,json=boolToAny,proto3" json:"bool_to_any,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToFloat       map[string]float32                 `protobuf:"bytes,44,rep,name=string_to_float,json=stringToFloat,proto3" json:"string_to_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringToDouble      map[string]float64                 `protobuf:"bytes,45,rep,name=string_to_double,json=stringToDouble,proto3" json:"string_to_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringToBool        map[string]bool                    `protobuf:"bytes,46,rep,name=string_to_bool,json=stringToBool,proto3" json:"string_to_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToString      map[string]string                  `protobuf:"bytes,47,rep,name=string_to_string,json=stringToString,proto3" json:"string_to_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToBytes       map[string][]byte                  `protobuf:"bytes,48,rep,name=string_to_bytes,json=stringToBytes,proto3" json:"string_to_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToAny         map[string]*anypb.Any              `protobuf:"bytes,49,rep,name=string_to_any,json=stringToAny,proto3" json:"string_to_any,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToDuration    map[string]*durationpb.Duration    `protobuf:"bytes,50,rep,name=string_to_duration,json=stringToDuration,proto3" json:"string_to_duration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToTimestamp   map[string]*timestamppb.Timestamp  `protobuf:"bytes,51,rep,name=string_to_timestamp,json=stringToTimestamp,proto3" json:"string_to_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToStruct      map[string]*structpb.Struct        `protobuf:"bytes,52,rep,name=string_to_struct,json=stringToStruct,proto3" json:"string_to_struct,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToUint32Value map[string]*wrapperspb.UInt32Value `protobuf:"bytes,53,rep,name=string_to_uint32_value,json=stringToUint32Value,proto3" json:"string_to_uint32_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToUint64Value map[string]*wrapperspb.UInt64Value `protobuf:"bytes,54,rep,name=string_to_uint64_value,json=stringToUint64Value,proto3" json:"string_to_uint64_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToInt32Value  map[string]*wrapperspb.Int32Value  `protobuf:"bytes,55,rep,name=string_to_int32_value,json=stringToInt32Value,proto3" json:"string_to_int32_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToInt64Value  map[string]*wrapperspb.Int64Value  `protobuf:"bytes,56,rep,name=string_to_int64_value,json=stringToInt64Value,proto3" json:"string_to_int64_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToBoolValue   map[string]*wrapperspb.BoolValue   `protobuf:"bytes,57,rep,name=string_to_bool_value,json=stringToBoolValue,proto3" json:"string_to_bool_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToStringValue map[string]*wrapperspb.StringValue `protobuf:"bytes,58,rep,name=string_to_string_value,json=stringToStringValue,proto3" json:"string_to_string_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToBytesValue  map[string]*wrapperspb.BytesValue  `protobuf:"bytes,59,rep,name=string_to_bytes_value,json=stringToBytesValue,proto3" json:"string_to_bytes_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumField           Message2_Color                     `protobuf:"varint,61,opt,name=enum_field,json=enumField,proto3,enum=testdata.Message2_Color" json:"enum_field,omitempty"`
	// Types that are assignable to OneofField:
	//
	//	*Message2_OneofInt32Field
	//	*Message2_OneofStringField
	//	*Message2_OneofBoolField
	//	*Message2_OneofNestedMessageField
	OneofField isMessage2_OneofField `protobuf_oneof:"oneof_field"`
}

func (x *Message2) Reset() {
	*x = Message2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message2) ProtoMessage() {}

func (x *Message2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message2.ProtoReflect.Descriptor instead.
func (*Message2) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1}
}

func (x *Message2) GetInt32Field() int32 {
	if x != nil {
		return x.Int32Field
	}
	return 0
}

func (x *Message2) GetInt64Field() int64 {
	if x != nil {
		return x.Int64Field
	}
	return 0
}

func (x *Message2) GetUint32Field() uint32 {
	if x != nil {
		return x.Uint32Field
	}
	return 0
}

func (x *Message2) GetUint64Field() uint64 {
	if x != nil {
		return x.Uint64Field
	}
	return 0
}

func (x *Message2) GetFloatField() float32 {
	if x != nil {
		return x.FloatField
	}
	return 0
}

func (x *Message2) GetDoubleField() float64 {
	if x != nil {
		return x.DoubleField
	}
	return 0
}

func (x *Message2) GetBoolField() bool {
	if x != nil {
		return x.BoolField
	}
	return false
}

func (x *Message2) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *Message2) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (x *Message2) GetAnyField() *anypb.Any {
	if x != nil {
		return x.AnyField
	}
	return nil
}

func (x *Message2) GetDurationField() *durationpb.Duration {
	if x != nil {
		return x.DurationField
	}
	return nil
}

func (x *Message2) GetTimestampField() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampField
	}
	return nil
}

func (x *Message2) GetStructField() *structpb.Struct {
	if x != nil {
		return x.StructField
	}
	return nil
}

func (x *Message2) GetUint32ValueField() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueField
	}
	return nil
}

func (x *Message2) GetUint64ValueField() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueField
	}
	return nil
}

func (x *Message2) GetInt32ValueField() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueField
	}
	return nil
}

func (x *Message2) GetInt64ValueField() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueField
	}
	return nil
}

func (x *Message2) GetBoolValueField() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueField
	}
	return nil
}

func (x *Message2) GetStringValueField() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValueField
	}
	return nil
}

func (x *Message2) GetBytesValueField() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueField
	}
	return nil
}

func (x *Message2) GetFloatList() []float32 {
	if x != nil {
		return x.FloatList
	}
	return nil
}

func (x *Message2) GetDoubleList() []float64 {
	if x != nil {
		return x.DoubleList
	}
	return nil
}

func (x *Message2) GetBoolList() []bool {
	if x != nil {
		return x.BoolList
	}
	return nil
}

func (x *Message2) GetStringList() []string {
	if x != nil {
		return x.StringList
	}
	return nil
}

func (x *Message2) GetBytesList() [][]byte {
	if x != nil {
		return x.BytesList
	}
	return nil
}

func (x *Message2) GetAnyList() []*anypb.Any {
	if x != nil {
		return x.AnyList
	}
	return nil
}

func (x *Message2) GetDurationList() []*durationpb.Duration {
	if x != nil {
		return x.DurationList
	}
	return nil
}

func (x *Message2) GetTimestampList() []*timestamppb.Timestamp {
	if x != nil {
		return x.TimestampList
	}
	return nil
}

func (x *Message2) GetStructList() []*structpb.Struct {
	if x != nil {
		return x.StructList
	}
	return nil
}

func (x *Message2) GetUint32ValueList() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueList
	}
	return nil
}

func (x *Message2) GetUint64ValueList() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueList
	}
	return nil
}

func (x *Message2) GetInt32ValueList() []*wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueList
	}
	return nil
}

func (x *Message2) GetInt64ValueList() []*wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueList
	}
	return nil
}

func (x *Message2) GetBoolValueList() []*wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueList
	}
	return nil
}

func (x *Message2) GetStringValueList() []*wrapperspb.StringValue {
	if x != nil {
		return x.StringValueList
	}
	return nil
}

func (x *Message2) GetBytesValueList() []*wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueList
	}
	return nil
}

func (x *Message2) GetInt32ToBool() map[int32]bool {
	if x != nil {
		return x.Int32ToBool
	}
	return nil
}

func (x *Message2) GetInt64ToString() map[int64]string {
	if x != nil {
		return x.Int64ToString
	}
	return nil
}

func (x *Message2) GetUint32ToBytes() map[uint32][]byte {
	if x != nil {
		return x.Uint32ToBytes
	}
	return nil
}

func (x *Message2) GetUint64ToAny() map[uint64]*anypb.Any {
	if x != nil {
		return x.Uint64ToAny
	}
	return nil
}

func (x *Message2) GetBoolToAny() map[bool]*anypb.Any {
	if x != nil {
		return x.BoolToAny
	}
	return nil
}

func (x *Message2) GetStringToFloat() map[string]float32 {
	if x != nil {
		return x.StringToFloat
	}
	return nil
}

func (x *Message2) GetStringToDouble() map[string]float64 {
	if x != nil {
		return x.StringToDouble
	}
	return nil
}

func (x *Message2) GetStringToBool() map[string]bool {
	if x != nil {
		return x.StringToBool
	}
	return nil
}

func (x *Message2) GetStringToString() map[string]string {
	if x != nil {
		return x.StringToString
	}
	return nil
}

func (x *Message2) GetStringToBytes() map[string][]byte {
	if x != nil {
		return x.StringToBytes
	}
	return nil
}

func (x *Message2) GetStringToAny() map[string]*anypb.Any {
	if x != nil {
		return x.StringToAny
	}
	return nil
}

func (x *Message2) GetStringToDuration() map[string]*durationpb.Duration {
	if x != nil {
		return x.StringToDuration
	}
	return nil
}

func (x *Message2) GetStringToTimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.StringToTimestamp
	}
	return nil
}

func (x *Message2) GetStringToStruct() map[string]*structpb.Struct {
	if x != nil {
		return x.StringToStruct
	}
	return nil
}

func (x *Message2) GetStringToUint32Value() map[string]*wrapperspb.UInt32Value {
	if x != nil {
		return x.StringToUint32Value
	}
	return nil
}

func (x *Message2) GetStringToUint64Value() map[string]*wrapperspb.UInt64Value {
	if x != nil {
		return x.StringToUint64Value
	}
	return nil
}

func (x *Message2) GetStringToInt32Value() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.StringToInt32Value
	}
	return nil
}

func (x *Message2) GetStringToInt64Value() map[string]*wrapperspb.Int64Value {
	if x != nil {
		return x.StringToInt64Value
	}
	return nil
}

func (x *Message2) GetStringToBoolValue() map[string]*wrapperspb.BoolValue {
	if x != nil {
		return x.StringToBoolValue
	}
	return nil
}

func (x *Message2) GetStringToStringValue() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.StringToStringValue
	}
	return nil
}

func (x *Message2) GetStringToBytesValue() map[string]*wrapperspb.BytesValue {
	if x != nil {
		return x.StringToBytesValue
	}
	return nil
}

func (x *Message2) GetEnumField() Message2_Color {
	if x != nil {
		return x.EnumField
	}
	return Message2_RED
}

func (m *Message2) GetOneofField() isMessage2_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (x *Message2) GetOneofInt32Field() int32 {
	if x, ok := x.GetOneofField().(*Message2_OneofInt32Field); ok {
		return x.OneofInt32Field
	}
	return 0
}

func (x *Message2) GetOneofStringField() string {
	if x, ok := x.GetOneofField().(*Message2_OneofStringField); ok {
		return x.OneofStringField
	}
	return ""
}

func (x *Message2) GetOneofBoolField() bool {
	if x, ok := x.GetOneofField().(*Message2_OneofBoolField); ok {
		return x.OneofBoolField
	}
	return false
}

func (x *Message2) GetOneofNestedMessageField() *Message2_NestedMessage {
	if x, ok := x.GetOneofField().(*Message2_OneofNestedMessageField); ok {
		return x.OneofNestedMessageField
	}
	return nil
}

type isMessage2_OneofField interface {
	isMessage2_OneofField()
}

type Message2_OneofInt32Field struct {
	OneofInt32Field int32 `protobuf:"varint,62,opt,name=oneof_int32_field,json=oneofInt32Field,proto3,oneof"`
}

type Message2_OneofStringField struct {
	OneofStringField string `protobuf:"bytes,63,opt,name=oneof_string_field,json=oneofStringField,proto3,oneof"`
}

type Message2_OneofBoolField struct {
	OneofBoolField bool `protobuf:"varint,64,opt,name=oneof_bool_field,json=oneofBoolField,proto3,oneof"`
}

type Message2_OneofNestedMessageField struct {
	OneofNestedMessageField *Message2_NestedMessage `protobuf:"bytes,65,opt,name=oneof_nested_message_field,json=oneofNestedMessageField,proto3,oneof"`
}

func (*Message2_OneofInt32Field) isMessage2_OneofField() {}

func (*Message2_OneofStringField) isMessage2_OneofField() {}

func (*Message2_OneofBoolField) isMessage2_OneofField() {}

func (*Message2_OneofNestedMessageField) isMessage2_OneofField() {}

type SampleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 *Sample1FieldMsg `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 *Sample2FieldMsg `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 *Sample3FieldMsg `protobuf:"bytes,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 *Sample4FieldMsg `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 *Sample5FieldMsg `protobuf:"bytes,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 *Sample6FieldMsg `protobuf:"bytes,6,opt,name=field6,proto3" json:"field6,omitempty"`
	Msg    *SampleMessage2  `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SampleMessage) Reset() {
	*x = SampleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleMessage) ProtoMessage() {}

func (x *SampleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleMessage.ProtoReflect.Descriptor instead.
func (*SampleMessage) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{2}
}

func (x *SampleMessage) GetField1() *Sample1FieldMsg {
	if x != nil {
		return x.Field1
	}
	return nil
}

func (x *SampleMessage) GetField2() *Sample2FieldMsg {
	if x != nil {
		return x.Field2
	}
	return nil
}

func (x *SampleMessage) GetField3() *Sample3FieldMsg {
	if x != nil {
		return x.Field3
	}
	return nil
}

func (x *SampleMessage) GetField4() *Sample4FieldMsg {
	if x != nil {
		return x.Field4
	}
	return nil
}

func (x *SampleMessage) GetField5() *Sample5FieldMsg {
	if x != nil {
		return x.Field5
	}
	return nil
}

func (x *SampleMessage) GetField6() *Sample6FieldMsg {
	if x != nil {
		return x.Field6
	}
	return nil
}

func (x *SampleMessage) GetMsg() *SampleMessage2 {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SampleMessage2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 *Sample1FieldMsg `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 *Sample2FieldMsg `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 *Sample3FieldMsg `protobuf:"bytes,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 *Sample4FieldMsg `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 *Sample5FieldMsg `protobuf:"bytes,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 *Sample6FieldMsg `protobuf:"bytes,6,opt,name=field6,proto3" json:"field6,omitempty"`
}

func (x *SampleMessage2) Reset() {
	*x = SampleMessage2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleMessage2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleMessage2) ProtoMessage() {}

func (x *SampleMessage2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleMessage2.ProtoReflect.Descriptor instead.
func (*SampleMessage2) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{3}
}

func (x *SampleMessage2) GetField1() *Sample1FieldMsg {
	if x != nil {
		return x.Field1
	}
	return nil
}

func (x *SampleMessage2) GetField2() *Sample2FieldMsg {
	if x != nil {
		return x.Field2
	}
	return nil
}

func (x *SampleMessage2) GetField3() *Sample3FieldMsg {
	if x != nil {
		return x.Field3
	}
	return nil
}

func (x *SampleMessage2) GetField4() *Sample4FieldMsg {
	if x != nil {
		return x.Field4
	}
	return nil
}

func (x *SampleMessage2) GetField5() *Sample5FieldMsg {
	if x != nil {
		return x.Field5
	}
	return nil
}

func (x *SampleMessage2) GetField6() *Sample6FieldMsg {
	if x != nil {
		return x.Field6
	}
	return nil
}

type Sample1FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
}

func (x *Sample1FieldMsg) Reset() {
	*x = Sample1FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample1FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample1FieldMsg) ProtoMessage() {}

func (x *Sample1FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample1FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample1FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{4}
}

func (x *Sample1FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

type Sample2FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
}

func (x *Sample2FieldMsg) Reset() {
	*x = Sample2FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample2FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample2FieldMsg) ProtoMessage() {}

func (x *Sample2FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample2FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample2FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{5}
}

func (x *Sample2FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample2FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

type Sample3FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
}

func (x *Sample3FieldMsg) Reset() {
	*x = Sample3FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample3FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample3FieldMsg) ProtoMessage() {}

func (x *Sample3FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample3FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample3FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{6}
}

func (x *Sample3FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample3FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample3FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

type Sample4FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
}

func (x *Sample4FieldMsg) Reset() {
	*x = Sample4FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample4FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample4FieldMsg) ProtoMessage() {}

func (x *Sample4FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample4FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample4FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{7}
}

func (x *Sample4FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample4FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample4FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *Sample4FieldMsg) GetField4() int32 {
	if x != nil {
		return x.Field4
	}
	return 0
}

type Sample5FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 int32 `protobuf:"varint,5,opt,name=field5,proto3" json:"field5,omitempty"`
}

func (x *Sample5FieldMsg) Reset() {
	*x = Sample5FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample5FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample5FieldMsg) ProtoMessage() {}

func (x *Sample5FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample5FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample5FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{8}
}

func (x *Sample5FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample5FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample5FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *Sample5FieldMsg) GetField4() int32 {
	if x != nil {
		return x.Field4
	}
	return 0
}

func (x *Sample5FieldMsg) GetField5() int32 {
	if x != nil {
		return x.Field5
	}
	return 0
}

type Sample6FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 int32 `protobuf:"varint,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 int32 `protobuf:"varint,6,opt,name=field6,proto3" json:"field6,omitempty"`
}

func (x *Sample6FieldMsg) Reset() {
	*x = Sample6FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample6FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample6FieldMsg) ProtoMessage() {}

func (x *Sample6FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample6FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample6FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{9}
}

func (x *Sample6FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample6FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample6FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *Sample6FieldMsg) GetField4() int32 {
	if x != nil {
		return x.Field4
	}
	return 0
}

func (x *Sample6FieldMsg) GetField5() int32 {
	if x != nil {
		return x.Field5
	}
	return 0
}

func (x *Sample6FieldMsg) GetField6() int32 {
	if x != nil {
		return x.Field6
	}
	return 0
}

type Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision  *int64                 `protobuf:"varint,1,opt,name=revision,proto3,oneof" json:"revision,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Revision) Reset() {
	*x = Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revision) ProtoMessage() {}

func (x *Revision) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revision.ProtoReflect.Descriptor instead.
func (*Revision) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{10}
}

func (x *Revision) GetRevision() int64 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

func (x *Revision) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SampleConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       *bool             `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Revision      *Revision         `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	StringField   *string           `protobuf:"bytes,3,opt,name=stringField,proto3,oneof" json:"stringField,omitempty"`
	BytesField    []byte            `protobuf:"bytes,4,opt,name=bytesField,proto3,oneof" json:"bytesField,omitempty"`
	MapField      map[string]string `protobuf:"bytes,5,rep,name=mapField,proto3" json:"mapField,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatedField []string          `protobuf:"bytes,6,rep,name=repeatedField,proto3" json:"repeatedField,omitempty"`
	EnumField     *SampleEnum       `protobuf:"varint,7,opt,name=enumField,proto3,enum=testdata.SampleEnum,oneof" json:"enumField,omitempty"`
	MessageField  *SampleMessage    `protobuf:"bytes,8,opt,name=messageField,proto3" json:"messageField,omitempty"`
}

func (x *SampleConfiguration) Reset() {
	*x = SampleConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleConfiguration) ProtoMessage() {}

func (x *SampleConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleConfiguration.ProtoReflect.Descriptor instead.
func (*SampleConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{11}
}

func (x *SampleConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SampleConfiguration) GetRevision() *Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *SampleConfiguration) GetStringField() string {
	if x != nil && x.StringField != nil {
		return *x.StringField
	}
	return ""
}

func (x *SampleConfiguration) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (x *SampleConfiguration) GetMapField() map[string]string {
	if x != nil {
		return x.MapField
	}
	return nil
}

func (x *SampleConfiguration) GetRepeatedField() []string {
	if x != nil {
		return x.RepeatedField
	}
	return nil
}

func (x *SampleConfiguration) GetEnumField() SampleEnum {
	if x != nil && x.EnumField != nil {
		return *x.EnumField
	}
	return SampleEnum_Unknown
}

func (x *SampleConfiguration) GetMessageField() *SampleMessage {
	if x != nil {
		return x.MessageField
	}
	return nil
}

type Int64Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[int64]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Int64Map) Reset() {
	*x = Int64Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Map) ProtoMessage() {}

func (x *Int64Map) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Map.ProtoReflect.Descriptor instead.
func (*Int64Map) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{12}
}

func (x *Int64Map) GetValue() map[int64]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Uint64Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[uint64]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Uint64Map) Reset() {
	*x = Uint64Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Map) ProtoMessage() {}

func (x *Uint64Map) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Map.ProtoReflect.Descriptor instead.
func (*Uint64Map) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{13}
}

func (x *Uint64Map) GetValue() map[uint64]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Int64List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *Int64List) Reset() {
	*x = Int64List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64List) ProtoMessage() {}

func (x *Int64List) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64List.ProtoReflect.Descriptor instead.
func (*Int64List) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{14}
}

func (x *Int64List) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Uint64List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []uint64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *Uint64List) Reset() {
	*x = Uint64List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64List) ProtoMessage() {}

func (x *Uint64List) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64List.ProtoReflect.Descriptor instead.
func (*Uint64List) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{15}
}

func (x *Uint64List) GetValue() []uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Message_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedInt32Field    int32                            `protobuf:"varint,1,opt,name=nested_int32_field,json=nestedInt32Field,proto3" json:"nested_int32_field,omitempty"`
	NestedStringField   string                           `protobuf:"bytes,2,opt,name=nested_string_field,json=nestedStringField,proto3" json:"nested_string_field,omitempty"`
	NestedBoolList      []bool                           `protobuf:"varint,3,rep,packed,name=nested_bool_list,json=nestedBoolList,proto3" json:"nested_bool_list,omitempty"`
	NestedStringToInt32 map[string]int32                 `protobuf:"bytes,4,rep,name=nested_string_to_int32,json=nestedStringToInt32,proto3" json:"nested_string_to_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NestedEnumField     Message_NestedMessage_NestedEnum `protobuf:"varint,5,opt,name=nested_enum_field,json=nestedEnumField,proto3,enum=testdata.Message_NestedMessage_NestedEnum" json:"nested_enum_field,omitempty"`
}

func (x *Message_NestedMessage) Reset() {
	*x = Message_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_NestedMessage) ProtoMessage() {}

func (x *Message_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_NestedMessage.ProtoReflect.Descriptor instead.
func (*Message_NestedMessage) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0, 22}
}

func (x *Message_NestedMessage) GetNestedInt32Field() int32 {
	if x != nil {
		return x.NestedInt32Field
	}
	return 0
}

func (x *Message_NestedMessage) GetNestedStringField() string {
	if x != nil {
		return x.NestedStringField
	}
	return ""
}

func (x *Message_NestedMessage) GetNestedBoolList() []bool {
	if x != nil {
		return x.NestedBoolList
	}
	return nil
}

func (x *Message_NestedMessage) GetNestedStringToInt32() map[string]int32 {
	if x != nil {
		return x.NestedStringToInt32
	}
	return nil
}

func (x *Message_NestedMessage) GetNestedEnumField() Message_NestedMessage_NestedEnum {
	if x != nil {
		return x.NestedEnumField
	}
	return Message_NestedMessage_OPTION1
}

type Message_NestedMessage_NestedMessage2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Message_NestedMessage_NestedMessage2) Reset() {
	*x = Message_NestedMessage_NestedMessage2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_NestedMessage_NestedMessage2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_NestedMessage_NestedMessage2) ProtoMessage() {}

func (x *Message_NestedMessage_NestedMessage2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_NestedMessage_NestedMessage2.ProtoReflect.Descriptor instead.
func (*Message_NestedMessage_NestedMessage2) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0, 22, 0}
}

type Message_NestedMessage_NestedMessage2_NestedMessage3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedInt32Field  int32  `protobuf:"varint,1,opt,name=nested_int32_field,json=nestedInt32Field,proto3" json:"nested_int32_field,omitempty"`
	NestedStringField string `protobuf:"bytes,2,opt,name=nested_string_field,json=nestedStringField,proto3" json:"nested_string_field,omitempty"`
}

func (x *Message_NestedMessage_NestedMessage2_NestedMessage3) Reset() {
	*x = Message_NestedMessage_NestedMessage2_NestedMessage3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_NestedMessage_NestedMessage2_NestedMessage3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_NestedMessage_NestedMessage2_NestedMessage3) ProtoMessage() {}

func (x *Message_NestedMessage_NestedMessage2_NestedMessage3) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_NestedMessage_NestedMessage2_NestedMessage3.ProtoReflect.Descriptor instead.
func (*Message_NestedMessage_NestedMessage2_NestedMessage3) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{0, 22, 0, 0}
}

func (x *Message_NestedMessage_NestedMessage2_NestedMessage3) GetNestedInt32Field() int32 {
	if x != nil {
		return x.NestedInt32Field
	}
	return 0
}

func (x *Message_NestedMessage_NestedMessage2_NestedMessage3) GetNestedStringField() string {
	if x != nil {
		return x.NestedStringField
	}
	return ""
}

type Message2_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedInt32Field    int32                             `protobuf:"varint,1,opt,name=nested_int32_field,json=nestedInt32Field,proto3" json:"nested_int32_field,omitempty"`
	NestedStringField   string                            `protobuf:"bytes,2,opt,name=nested_string_field,json=nestedStringField,proto3" json:"nested_string_field,omitempty"`
	NestedBoolList      []bool                            `protobuf:"varint,3,rep,packed,name=nested_bool_list,json=nestedBoolList,proto3" json:"nested_bool_list,omitempty"`
	NestedStringToInt32 map[string]int32                  `protobuf:"bytes,4,rep,name=nested_string_to_int32,json=nestedStringToInt32,proto3" json:"nested_string_to_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NestedEnumField     Message2_NestedMessage_NestedEnum `protobuf:"varint,5,opt,name=nested_enum_field,json=nestedEnumField,proto3,enum=testdata.Message2_NestedMessage_NestedEnum" json:"nested_enum_field,omitempty"`
}

func (x *Message2_NestedMessage) Reset() {
	*x = Message2_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message2_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message2_NestedMessage) ProtoMessage() {}

func (x *Message2_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message2_NestedMessage.ProtoReflect.Descriptor instead.
func (*Message2_NestedMessage) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1, 21}
}

func (x *Message2_NestedMessage) GetNestedInt32Field() int32 {
	if x != nil {
		return x.NestedInt32Field
	}
	return 0
}

func (x *Message2_NestedMessage) GetNestedStringField() string {
	if x != nil {
		return x.NestedStringField
	}
	return ""
}

func (x *Message2_NestedMessage) GetNestedBoolList() []bool {
	if x != nil {
		return x.NestedBoolList
	}
	return nil
}

func (x *Message2_NestedMessage) GetNestedStringToInt32() map[string]int32 {
	if x != nil {
		return x.NestedStringToInt32
	}
	return nil
}

func (x *Message2_NestedMessage) GetNestedEnumField() Message2_NestedMessage_NestedEnum {
	if x != nil {
		return x.NestedEnumField
	}
	return Message2_NestedMessage_OPTION1
}

type Message2_NestedMessage_NestedMessage2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Message2_NestedMessage_NestedMessage2) Reset() {
	*x = Message2_NestedMessage_NestedMessage2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message2_NestedMessage_NestedMessage2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message2_NestedMessage_NestedMessage2) ProtoMessage() {}

func (x *Message2_NestedMessage_NestedMessage2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message2_NestedMessage_NestedMessage2.ProtoReflect.Descriptor instead.
func (*Message2_NestedMessage_NestedMessage2) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1, 21, 0}
}

type Message2_NestedMessage_NestedMessage2_NestedMessage3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedInt32Field  int32  `protobuf:"varint,1,opt,name=nested_int32_field,json=nestedInt32Field,proto3" json:"nested_int32_field,omitempty"`
	NestedStringField string `protobuf:"bytes,2,opt,name=nested_string_field,json=nestedStringField,proto3" json:"nested_string_field,omitempty"`
}

func (x *Message2_NestedMessage_NestedMessage2_NestedMessage3) Reset() {
	*x = Message2_NestedMessage_NestedMessage2_NestedMessage3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message2_NestedMessage_NestedMessage2_NestedMessage3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message2_NestedMessage_NestedMessage2_NestedMessage3) ProtoMessage() {}

func (x *Message2_NestedMessage_NestedMessage2_NestedMessage3) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message2_NestedMessage_NestedMessage2_NestedMessage3.ProtoReflect.Descriptor instead.
func (*Message2_NestedMessage_NestedMessage2_NestedMessage3) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP(), []int{1, 21, 0, 0}
}

func (x *Message2_NestedMessage_NestedMessage2_NestedMessage3) GetNestedInt32Field() int32 {
	if x != nil {
		return x.NestedInt32Field
	}
	return 0
}

func (x *Message2_NestedMessage_NestedMessage2_NestedMessage3) GetNestedStringField() string {
	if x != nil {
		return x.NestedStringField
	}
	return ""
}

var File_github_com_kralicky_protoutil_test_testdata_testdata_proto protoreflect.FileDescriptor

var file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x61,
	0x6c, 0x69, 0x63, 0x6b, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x6c, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc0, 0x35, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x61,
	0x6e, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x40,
	0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4a, 0x0a,
	0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x47, 0x0a,
	0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x4c, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x41,
	0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54,
	0x6f, 0x41, 0x6e, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x4f, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x31, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x41, 0x6e,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x41, 0x6e, 0x79, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x38,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x39, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f,
	0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5c, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a,
	0x10, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x15, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x16, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x13,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64,
	0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x16,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64,
	0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xfa, 0x04, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x16, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x56, 0x0a, 0x11, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x1a, 0x6e, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x1a, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x31, 0x10, 0x00,
	0x1a, 0x46, 0x0a, 0x18, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x31, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x33, 0x10, 0x02, 0x22, 0x25, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c,
	0x55, 0x45, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0xea, 0x32, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x47, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x44, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x47, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x6e, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x07, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x27, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54,
	0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x6e, 0x79, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x41, 0x0a, 0x0b,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x2b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x12,
	0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x50,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d,
	0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x34, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x60, 0x0a,
	0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5d, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d,
	0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a,
	0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x15, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5f, 0x0a,
	0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3e,
	0x0a, 0x10, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x54, 0x0a, 0x10, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x41, 0x6e,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6c,
	0x54, 0x6f, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a,
	0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5a, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x18, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x64, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x60, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x64, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfc, 0x04, 0x0a, 0x0d,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x16, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x9c,
	0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x1a, 0x6e, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x33, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x1a, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x32,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x31, 0x10, 0x00, 0x1a, 0x46, 0x0a,
	0x18, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x31, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x33, 0x10, 0x02, 0x22, 0x25, 0x0a, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x22, 0xed, 0x02, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x31, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x33, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x31, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x34, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x31,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x35, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x36, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x36, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x31, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x33, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x31, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x34, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x12,
	0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x35, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x36, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x36, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x36, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x31,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31,
	0x22, 0x41, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x22, 0x59, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x33, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x22, 0x71,
	0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x34, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x35, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x22, 0xa1, 0x01,
	0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x36, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x34, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x36, 0x22, 0x72, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x04, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x79, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d,
	0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b,
	0x0a, 0x09, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22,
	0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0x2b, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x46, 0x6f, 0x6f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x10, 0x02, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72,
	0x61, 0x6c, 0x69, 0x63, 0x6b, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x6c,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescOnce sync.Once
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescData = file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDesc
)

func file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescGZIP() []byte {
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescOnce.Do(func() {
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescData)
	})
	return file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDescData
}

var file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_github_com_kralicky_protoutil_test_testdata_testdata_proto_goTypes = []any{
	(SampleEnum)(0),                                        // 0: testdata.SampleEnum
	(Message_Color)(0),                                     // 1: testdata.Message.Color
	(Message_NestedMessage_NestedEnum)(0),                  // 2: testdata.Message.NestedMessage.NestedEnum
	(Message_NestedMessage_NestedMessage2_NestedEnum2)(0),  // 3: testdata.Message.NestedMessage.NestedMessage2.NestedEnum2
	(Message2_Color)(0),                                    // 4: testdata.Message2.Color
	(Message2_NestedMessage_NestedEnum)(0),                 // 5: testdata.Message2.NestedMessage.NestedEnum
	(Message2_NestedMessage_NestedMessage2_NestedEnum2)(0), // 6: testdata.Message2.NestedMessage.NestedMessage2.NestedEnum2
	(*Message)(nil),                                        // 7: testdata.Message
	(*Message2)(nil),                                       // 8: testdata.Message2
	(*SampleMessage)(nil),                                  // 9: testdata.SampleMessage
	(*SampleMessage2)(nil),                                 // 10: testdata.SampleMessage2
	(*Sample1FieldMsg)(nil),                                // 11: testdata.Sample1FieldMsg
	(*Sample2FieldMsg)(nil),                                // 12: testdata.Sample2FieldMsg
	(*Sample3FieldMsg)(nil),                                // 13: testdata.Sample3FieldMsg
	(*Sample4FieldMsg)(nil),                                // 14: testdata.Sample4FieldMsg
	(*Sample5FieldMsg)(nil),                                // 15: testdata.Sample5FieldMsg
	(*Sample6FieldMsg)(nil),                                // 16: testdata.Sample6FieldMsg
	(*Revision)(nil),                                       // 17: testdata.Revision
	(*SampleConfiguration)(nil),                            // 18: testdata.SampleConfiguration
	(*Int64Map)(nil),                                       // 19: testdata.Int64Map
	(*Uint64Map)(nil),                                      // 20: testdata.Uint64Map
	(*Int64List)(nil),                                      // 21: testdata.Int64List
	(*Uint64List)(nil),                                     // 22: testdata.Uint64List
	nil,                                                    // 23: testdata.Message.Int32ToBoolEntry
	nil,                                                    // 24: testdata.Message.Int64ToStringEntry
	nil,                                                    // 25: testdata.Message.Uint32ToBytesEntry
	nil,                                                    // 26: testdata.Message.Uint64ToAnyEntry
	nil,                                                    // 27: testdata.Message.BoolToMessageEntry
	nil,                                                    // 28: testdata.Message.StringToFloatEntry
	nil,                                                    // 29: testdata.Message.StringToDoubleEntry
	nil,                                                    // 30: testdata.Message.StringToBoolEntry
	nil,                                                    // 31: testdata.Message.StringToStringEntry
	nil,                                                    // 32: testdata.Message.StringToBytesEntry
	nil,                                                    // 33: testdata.Message.StringToAnyEntry
	nil,                                                    // 34: testdata.Message.StringToDurationEntry
	nil,                                                    // 35: testdata.Message.StringToTimestampEntry
	nil,                                                    // 36: testdata.Message.StringToStructEntry
	nil,                                                    // 37: testdata.Message.StringToUint32ValueEntry
	nil,                                                    // 38: testdata.Message.StringToUint64ValueEntry
	nil,                                                    // 39: testdata.Message.StringToInt32ValueEntry
	nil,                                                    // 40: testdata.Message.StringToInt64ValueEntry
	nil,                                                    // 41: testdata.Message.StringToBoolValueEntry
	nil,                                                    // 42: testdata.Message.StringToStringValueEntry
	nil,                                                    // 43: testdata.Message.StringToBytesValueEntry
	nil,                                                    // 44: testdata.Message.StringToMessageEntry
	(*Message_NestedMessage)(nil),                          // 45: testdata.Message.NestedMessage
	(*Message_NestedMessage_NestedMessage2)(nil), // 46: testdata.Message.NestedMessage.NestedMessage2
	nil, // 47: testdata.Message.NestedMessage.NestedStringToInt32Entry
	(*Message_NestedMessage_NestedMessage2_NestedMessage3)(nil), // 48: testdata.Message.NestedMessage.NestedMessage2.NestedMessage3
	nil,                            // 49: testdata.Message2.Int32ToBoolEntry
	nil,                            // 50: testdata.Message2.Int64ToStringEntry
	nil,                            // 51: testdata.Message2.Uint32ToBytesEntry
	nil,                            // 52: testdata.Message2.Uint64ToAnyEntry
	nil,                            // 53: testdata.Message2.BoolToAnyEntry
	nil,                            // 54: testdata.Message2.StringToFloatEntry
	nil,                            // 55: testdata.Message2.StringToDoubleEntry
	nil,                            // 56: testdata.Message2.StringToBoolEntry
	nil,                            // 57: testdata.Message2.StringToStringEntry
	nil,                            // 58: testdata.Message2.StringToBytesEntry
	nil,                            // 59: testdata.Message2.StringToAnyEntry
	nil,                            // 60: testdata.Message2.StringToDurationEntry
	nil,                            // 61: testdata.Message2.StringToTimestampEntry
	nil,                            // 62: testdata.Message2.StringToStructEntry
	nil,                            // 63: testdata.Message2.StringToUint32ValueEntry
	nil,                            // 64: testdata.Message2.StringToUint64ValueEntry
	nil,                            // 65: testdata.Message2.StringToInt32ValueEntry
	nil,                            // 66: testdata.Message2.StringToInt64ValueEntry
	nil,                            // 67: testdata.Message2.StringToBoolValueEntry
	nil,                            // 68: testdata.Message2.StringToStringValueEntry
	nil,                            // 69: testdata.Message2.StringToBytesValueEntry
	(*Message2_NestedMessage)(nil), // 70: testdata.Message2.NestedMessage
	(*Message2_NestedMessage_NestedMessage2)(nil), // 71: testdata.Message2.NestedMessage.NestedMessage2
	nil, // 72: testdata.Message2.NestedMessage.NestedStringToInt32Entry
	(*Message2_NestedMessage_NestedMessage2_NestedMessage3)(nil), // 73: testdata.Message2.NestedMessage.NestedMessage2.NestedMessage3
	nil,                            // 74: testdata.SampleConfiguration.MapFieldEntry
	nil,                            // 75: testdata.Int64Map.ValueEntry
	nil,                            // 76: testdata.Uint64Map.ValueEntry
	(*anypb.Any)(nil),              // 77: google.protobuf.Any
	(*durationpb.Duration)(nil),    // 78: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),  // 79: google.protobuf.Timestamp
	(*structpb.Struct)(nil),        // 80: google.protobuf.Struct
	(*wrapperspb.UInt32Value)(nil), // 81: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 82: google.protobuf.UInt64Value
	(*wrapperspb.Int32Value)(nil),  // 83: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 84: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),   // 85: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil), // 86: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),  // 87: google.protobuf.BytesValue
}
var file_github_com_kralicky_protoutil_test_testdata_testdata_proto_depIdxs = []int32{
	77,  // 0: testdata.Message.any_field:type_name -> google.protobuf.Any
	78,  // 1: testdata.Message.duration_field:type_name -> google.protobuf.Duration
	79,  // 2: testdata.Message.timestamp_field:type_name -> google.protobuf.Timestamp
	80,  // 3: testdata.Message.struct_field:type_name -> google.protobuf.Struct
	81,  // 4: testdata.Message.uint32_value_field:type_name -> google.protobuf.UInt32Value
	82,  // 5: testdata.Message.uint64_value_field:type_name -> google.protobuf.UInt64Value
	83,  // 6: testdata.Message.int32_value_field:type_name -> google.protobuf.Int32Value
	84,  // 7: testdata.Message.int64_value_field:type_name -> google.protobuf.Int64Value
	85,  // 8: testdata.Message.bool_value_field:type_name -> google.protobuf.BoolValue
	86,  // 9: testdata.Message.string_value_field:type_name -> google.protobuf.StringValue
	87,  // 10: testdata.Message.bytes_value_field:type_name -> google.protobuf.BytesValue
	8,   // 11: testdata.Message.message_field:type_name -> testdata.Message2
	77,  // 12: testdata.Message.any_list:type_name -> google.protobuf.Any
	78,  // 13: testdata.Message.duration_list:type_name -> google.protobuf.Duration
	79,  // 14: testdata.Message.timestamp_list:type_name -> google.protobuf.Timestamp
	80,  // 15: testdata.Message.struct_list:type_name -> google.protobuf.Struct
	81,  // 16: testdata.Message.uint32_value_list:type_name -> google.protobuf.UInt32Value
	82,  // 17: testdata.Message.uint64_value_list:type_name -> google.protobuf.UInt64Value
	83,  // 18: testdata.Message.int32_value_list:type_name -> google.protobuf.Int32Value
	84,  // 19: testdata.Message.int64_value_list:type_name -> google.protobuf.Int64Value
	85,  // 20: testdata.Message.bool_value_list:type_name -> google.protobuf.BoolValue
	86,  // 21: testdata.Message.string_value_list:type_name -> google.protobuf.StringValue
	87,  // 22: testdata.Message.bytes_value_list:type_name -> google.protobuf.BytesValue
	8,   // 23: testdata.Message.message_list:type_name -> testdata.Message2
	23,  // 24: testdata.Message.int32_to_bool:type_name -> testdata.Message.Int32ToBoolEntry
	24,  // 25: testdata.Message.int64_to_string:type_name -> testdata.Message.Int64ToStringEntry
	25,  // 26: testdata.Message.uint32_to_bytes:type_name -> testdata.Message.Uint32ToBytesEntry
	26,  // 27: testdata.Message.uint64_to_any:type_name -> testdata.Message.Uint64ToAnyEntry
	27,  // 28: testdata.Message.bool_to_message:type_name -> testdata.Message.BoolToMessageEntry
	28,  // 29: testdata.Message.string_to_float:type_name -> testdata.Message.StringToFloatEntry
	29,  // 30: testdata.Message.string_to_double:type_name -> testdata.Message.StringToDoubleEntry
	30,  // 31: testdata.Message.string_to_bool:type_name -> testdata.Message.StringToBoolEntry
	31,  // 32: testdata.Message.string_to_string:type_name -> testdata.Message.StringToStringEntry
	32,  // 33: testdata.Message.string_to_bytes:type_name -> testdata.Message.StringToBytesEntry
	33,  // 34: testdata.Message.string_to_any:type_name -> testdata.Message.StringToAnyEntry
	34,  // 35: testdata.Message.string_to_duration:type_name -> testdata.Message.StringToDurationEntry
	35,  // 36: testdata.Message.string_to_timestamp:type_name -> testdata.Message.StringToTimestampEntry
	36,  // 37: testdata.Message.string_to_struct:type_name -> testdata.Message.StringToStructEntry
	37,  // 38: testdata.Message.string_to_uint32_value:type_name -> testdata.Message.StringToUint32ValueEntry
	38,  // 39: testdata.Message.string_to_uint64_value:type_name -> testdata.Message.StringToUint64ValueEntry
	39,  // 40: testdata.Message.string_to_int32_value:type_name -> testdata.Message.StringToInt32ValueEntry
	40,  // 41: testdata.Message.string_to_int64_value:type_name -> testdata.Message.StringToInt64ValueEntry
	41,  // 42: testdata.Message.string_to_bool_value:type_name -> testdata.Message.StringToBoolValueEntry
	42,  // 43: testdata.Message.string_to_string_value:type_name -> testdata.Message.StringToStringValueEntry
	43,  // 44: testdata.Message.string_to_bytes_value:type_name -> testdata.Message.StringToBytesValueEntry
	44,  // 45: testdata.Message.string_to_message:type_name -> testdata.Message.StringToMessageEntry
	1,   // 46: testdata.Message.enum_field:type_name -> testdata.Message.Color
	45,  // 47: testdata.Message.oneof_nested_message_field:type_name -> testdata.Message.NestedMessage
	8,   // 48: testdata.Message.oneof_message_field:type_name -> testdata.Message2
	77,  // 49: testdata.Message2.any_field:type_name -> google.protobuf.Any
	78,  // 50: testdata.Message2.duration_field:type_name -> google.protobuf.Duration
	79,  // 51: testdata.Message2.timestamp_field:type_name -> google.protobuf.Timestamp
	80,  // 52: testdata.Message2.struct_field:type_name -> google.protobuf.Struct
	81,  // 53: testdata.Message2.uint32_value_field:type_name -> google.protobuf.UInt32Value
	82,  // 54: testdata.Message2.uint64_value_field:type_name -> google.protobuf.UInt64Value
	83,  // 55: testdata.Message2.int32_value_field:type_name -> google.protobuf.Int32Value
	84,  // 56: testdata.Message2.int64_value_field:type_name -> google.protobuf.Int64Value
	85,  // 57: testdata.Message2.bool_value_field:type_name -> google.protobuf.BoolValue
	86,  // 58: testdata.Message2.string_value_field:type_name -> google.protobuf.StringValue
	87,  // 59: testdata.Message2.bytes_value_field:type_name -> google.protobuf.BytesValue
	77,  // 60: testdata.Message2.any_list:type_name -> google.protobuf.Any
	78,  // 61: testdata.Message2.duration_list:type_name -> google.protobuf.Duration
	79,  // 62: testdata.Message2.timestamp_list:type_name -> google.protobuf.Timestamp
	80,  // 63: testdata.Message2.struct_list:type_name -> google.protobuf.Struct
	81,  // 64: testdata.Message2.uint32_value_list:type_name -> google.protobuf.UInt32Value
	82,  // 65: testdata.Message2.uint64_value_list:type_name -> google.protobuf.UInt64Value
	83,  // 66: testdata.Message2.int32_value_list:type_name -> google.protobuf.Int32Value
	84,  // 67: testdata.Message2.int64_value_list:type_name -> google.protobuf.Int64Value
	85,  // 68: testdata.Message2.bool_value_list:type_name -> google.protobuf.BoolValue
	86,  // 69: testdata.Message2.string_value_list:type_name -> google.protobuf.StringValue
	87,  // 70: testdata.Message2.bytes_value_list:type_name -> google.protobuf.BytesValue
	49,  // 71: testdata.Message2.int32_to_bool:type_name -> testdata.Message2.Int32ToBoolEntry
	50,  // 72: testdata.Message2.int64_to_string:type_name -> testdata.Message2.Int64ToStringEntry
	51,  // 73: testdata.Message2.uint32_to_bytes:type_name -> testdata.Message2.Uint32ToBytesEntry
	52,  // 74: testdata.Message2.uint64_to_any:type_name -> testdata.Message2.Uint64ToAnyEntry
	53,  // 75: testdata.Message2.bool_to_any:type_name -> testdata.Message2.BoolToAnyEntry
	54,  // 76: testdata.Message2.string_to_float:type_name -> testdata.Message2.StringToFloatEntry
	55,  // 77: testdata.Message2.string_to_double:type_name -> testdata.Message2.StringToDoubleEntry
	56,  // 78: testdata.Message2.string_to_bool:type_name -> testdata.Message2.StringToBoolEntry
	57,  // 79: testdata.Message2.string_to_string:type_name -> testdata.Message2.StringToStringEntry
	58,  // 80: testdata.Message2.string_to_bytes:type_name -> testdata.Message2.StringToBytesEntry
	59,  // 81: testdata.Message2.string_to_any:type_name -> testdata.Message2.StringToAnyEntry
	60,  // 82: testdata.Message2.string_to_duration:type_name -> testdata.Message2.StringToDurationEntry
	61,  // 83: testdata.Message2.string_to_timestamp:type_name -> testdata.Message2.StringToTimestampEntry
	62,  // 84: testdata.Message2.string_to_struct:type_name -> testdata.Message2.StringToStructEntry
	63,  // 85: testdata.Message2.string_to_uint32_value:type_name -> testdata.Message2.StringToUint32ValueEntry
	64,  // 86: testdata.Message2.string_to_uint64_value:type_name -> testdata.Message2.StringToUint64ValueEntry
	65,  // 87: testdata.Message2.string_to_int32_value:type_name -> testdata.Message2.StringToInt32ValueEntry
	66,  // 88: testdata.Message2.string_to_int64_value:type_name -> testdata.Message2.StringToInt64ValueEntry
	67,  // 89: testdata.Message2.string_to_bool_value:type_name -> testdata.Message2.StringToBoolValueEntry
	68,  // 90: testdata.Message2.string_to_string_value:type_name -> testdata.Message2.StringToStringValueEntry
	69,  // 91: testdata.Message2.string_to_bytes_value:type_name -> testdata.Message2.StringToBytesValueEntry
	4,   // 92: testdata.Message2.enum_field:type_name -> testdata.Message2.Color
	70,  // 93: testdata.Message2.oneof_nested_message_field:type_name -> testdata.Message2.NestedMessage
	11,  // 94: testdata.SampleMessage.field1:type_name -> testdata.Sample1FieldMsg
	12,  // 95: testdata.SampleMessage.field2:type_name -> testdata.Sample2FieldMsg
	13,  // 96: testdata.SampleMessage.field3:type_name -> testdata.Sample3FieldMsg
	14,  // 97: testdata.SampleMessage.field4:type_name -> testdata.Sample4FieldMsg
	15,  // 98: testdata.SampleMessage.field5:type_name -> testdata.Sample5FieldMsg
	16,  // 99: testdata.SampleMessage.field6:type_name -> testdata.Sample6FieldMsg
	10,  // 100: testdata.SampleMessage.msg:type_name -> testdata.SampleMessage2
	11,  // 101: testdata.SampleMessage2.field1:type_name -> testdata.Sample1FieldMsg
	12,  // 102: testdata.SampleMessage2.field2:type_name -> testdata.Sample2FieldMsg
	13,  // 103: testdata.SampleMessage2.field3:type_name -> testdata.Sample3FieldMsg
	14,  // 104: testdata.SampleMessage2.field4:type_name -> testdata.Sample4FieldMsg
	15,  // 105: testdata.SampleMessage2.field5:type_name -> testdata.Sample5FieldMsg
	16,  // 106: testdata.SampleMessage2.field6:type_name -> testdata.Sample6FieldMsg
	79,  // 107: testdata.Revision.timestamp:type_name -> google.protobuf.Timestamp
	17,  // 108: testdata.SampleConfiguration.revision:type_name -> testdata.Revision
	74,  // 109: testdata.SampleConfiguration.mapField:type_name -> testdata.SampleConfiguration.MapFieldEntry
	0,   // 110: testdata.SampleConfiguration.enumField:type_name -> testdata.SampleEnum
	9,   // 111: testdata.SampleConfiguration.messageField:type_name -> testdata.SampleMessage
	75,  // 112: testdata.Int64Map.value:type_name -> testdata.Int64Map.ValueEntry
	76,  // 113: testdata.Uint64Map.value:type_name -> testdata.Uint64Map.ValueEntry
	77,  // 114: testdata.Message.Uint64ToAnyEntry.value:type_name -> google.protobuf.Any
	8,   // 115: testdata.Message.BoolToMessageEntry.value:type_name -> testdata.Message2
	77,  // 116: testdata.Message.StringToAnyEntry.value:type_name -> google.protobuf.Any
	78,  // 117: testdata.Message.StringToDurationEntry.value:type_name -> google.protobuf.Duration
	79,  // 118: testdata.Message.StringToTimestampEntry.value:type_name -> google.protobuf.Timestamp
	80,  // 119: testdata.Message.StringToStructEntry.value:type_name -> google.protobuf.Struct
	81,  // 120: testdata.Message.StringToUint32ValueEntry.value:type_name -> google.protobuf.UInt32Value
	82,  // 121: testdata.Message.StringToUint64ValueEntry.value:type_name -> google.protobuf.UInt64Value
	83,  // 122: testdata.Message.StringToInt32ValueEntry.value:type_name -> google.protobuf.Int32Value
	84,  // 123: testdata.Message.StringToInt64ValueEntry.value:type_name -> google.protobuf.Int64Value
	85,  // 124: testdata.Message.StringToBoolValueEntry.value:type_name -> google.protobuf.BoolValue
	86,  // 125: testdata.Message.StringToStringValueEntry.value:type_name -> google.protobuf.StringValue
	87,  // 126: testdata.Message.StringToBytesValueEntry.value:type_name -> google.protobuf.BytesValue
	8,   // 127: testdata.Message.StringToMessageEntry.value:type_name -> testdata.Message2
	47,  // 128: testdata.Message.NestedMessage.nested_string_to_int32:type_name -> testdata.Message.NestedMessage.NestedStringToInt32Entry
	2,   // 129: testdata.Message.NestedMessage.nested_enum_field:type_name -> testdata.Message.NestedMessage.NestedEnum
	77,  // 130: testdata.Message2.Uint64ToAnyEntry.value:type_name -> google.protobuf.Any
	77,  // 131: testdata.Message2.BoolToAnyEntry.value:type_name -> google.protobuf.Any
	77,  // 132: testdata.Message2.StringToAnyEntry.value:type_name -> google.protobuf.Any
	78,  // 133: testdata.Message2.StringToDurationEntry.value:type_name -> google.protobuf.Duration
	79,  // 134: testdata.Message2.StringToTimestampEntry.value:type_name -> google.protobuf.Timestamp
	80,  // 135: testdata.Message2.StringToStructEntry.value:type_name -> google.protobuf.Struct
	81,  // 136: testdata.Message2.StringToUint32ValueEntry.value:type_name -> google.protobuf.UInt32Value
	82,  // 137: testdata.Message2.StringToUint64ValueEntry.value:type_name -> google.protobuf.UInt64Value
	83,  // 138: testdata.Message2.StringToInt32ValueEntry.value:type_name -> google.protobuf.Int32Value
	84,  // 139: testdata.Message2.StringToInt64ValueEntry.value:type_name -> google.protobuf.Int64Value
	85,  // 140: testdata.Message2.StringToBoolValueEntry.value:type_name -> google.protobuf.BoolValue
	86,  // 141: testdata.Message2.StringToStringValueEntry.value:type_name -> google.protobuf.StringValue
	87,  // 142: testdata.Message2.StringToBytesValueEntry.value:type_name -> google.protobuf.BytesValue
	72,  // 143: testdata.Message2.NestedMessage.nested_string_to_int32:type_name -> testdata.Message2.NestedMessage.NestedStringToInt32Entry
	5,   // 144: testdata.Message2.NestedMessage.nested_enum_field:type_name -> testdata.Message2.NestedMessage.NestedEnum
	145, // [145:145] is the sub-list for method output_type
	145, // [145:145] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_github_com_kralicky_protoutil_test_testdata_testdata_proto_init() }
func file_github_com_kralicky_protoutil_test_testdata_testdata_proto_init() {
	if File_github_com_kralicky_protoutil_test_testdata_testdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Message2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SampleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SampleMessage2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Sample1FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Sample2FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Sample3FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Sample4FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Sample5FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Sample6FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SampleConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Int64Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Uint64Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Int64List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Uint64List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*Message_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Message_NestedMessage_NestedMessage2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*Message_NestedMessage_NestedMessage2_NestedMessage3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*Message2_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*Message2_NestedMessage_NestedMessage2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*Message2_NestedMessage_NestedMessage2_NestedMessage3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[0].OneofWrappers = []any{
		(*Message_OneofInt32Field)(nil),
		(*Message_OneofStringField)(nil),
		(*Message_OneofBoolField)(nil),
		(*Message_OneofNestedMessageField)(nil),
		(*Message_OneofMessageField)(nil),
	}
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[1].OneofWrappers = []any{
		(*Message2_OneofInt32Field)(nil),
		(*Message2_OneofStringField)(nil),
		(*Message2_OneofBoolField)(nil),
		(*Message2_OneofNestedMessageField)(nil),
	}
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[10].OneofWrappers = []any{}
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_kralicky_protoutil_test_testdata_testdata_proto_goTypes,
		DependencyIndexes: file_github_com_kralicky_protoutil_test_testdata_testdata_proto_depIdxs,
		EnumInfos:         file_github_com_kralicky_protoutil_test_testdata_testdata_proto_enumTypes,
		MessageInfos:      file_github_com_kralicky_protoutil_test_testdata_testdata_proto_msgTypes,
	}.Build()
	File_github_com_kralicky_protoutil_test_testdata_testdata_proto = out.File
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_rawDesc = nil
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_goTypes = nil
	file_github_com_kralicky_protoutil_test_testdata_testdata_proto_depIdxs = nil
}
